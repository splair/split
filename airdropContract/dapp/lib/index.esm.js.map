{"version":3,"file":"index.esm.js","sources":["../src/utils.js","../src/Layout.js","../src/Airdrop.js"],"sourcesContent":["\nexport function intFromBytes(byteArr) {\n    let ret = 0;\n    byteArr.forEach((val, i) => { ret += val * 256 ** i; });\n    return ret;\n}","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport function publicKey(property) {\n    return BufferLayout.blob(32, property);\n}\n\nexport const airdropHeadSpace = 113 \n\n","/**\n * @flow\n */\n\nimport { \n    PublicKey,\n    SystemProgram,\n    Account,\n    TransactionInstruction,\n    Transaction,\n    sendAndConfirmTransaction,\n    SYSVAR_CLOCK_PUBKEY } from \"@solana/web3.js\"\nimport {u64} from '@solana/spl-token'\nimport {intFromBytes} from './utils'\nimport * as Layout from './Layout';\nimport * as BufferLayout from 'buffer-layout';\nimport {Token, AccountLayout} from '@solana/spl-token';\n\nexport const TOKEN_PROGRAM = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'\n\n/**\n * Airdrop\n */\nexport class Airdrop {\n    /**\n     * Construct an  Initialize instruction\n     *\n     */\n    static createAirdropInstruction(\n        programID,\n        publisherKey,\n        bankKey,\n        mintKey,\n        airdropKey,\n        authKey,\n        amount,\n        count,\n        nonce,\n        names\n    ) {\n\n        const dataLayout = BufferLayout.struct([\n            BufferLayout.u8(\"i\"),\n            BufferLayout.blob(8,\"amount\"),\n            BufferLayout.blob(8,\"count\"),\n            BufferLayout.u8(\"nonce\"),\n        ]);\n      \n        const data = Buffer.alloc(dataLayout.span+count*32);\n        dataLayout.encode(\n            {\n              i:1, // airdrop instruct \n              amount:new u64(amount).toBuffer(),\n              count:new u64(count).toBuffer(),\n              nonce:nonce,\n            },\n            data,\n        );\n        console.log(\"names:\", names)\n\n        for (let i=0; i<count; i++) {\n            names[i].copy(data,dataLayout.span+i*32)\n        }\n        console.log(\"data is \", data)\n      \n        let keys = [\n            {pubkey: publisherKey, isSigner: true, isWritable: true},\n            {pubkey: bankKey, isSigner: false, isWritable: true},\n            {pubkey: mintKey, isSigner: false, isWritable: true},\n            {pubkey: airdropKey, isSigner: false, isWritable: true},\n            {pubkey: authKey, isSigner: false, isWritable: true},\n        ];\n\n        const  trxi = new TransactionInstruction({\n            keys,\n            programId: programID,\n            data,\n        });\n        return trxi;\n    }\n\n    /**\n     * Construct an  Claim instruction\n     *\n     */\n    static createClaimInstruction(\n        programID,\n        tokenProgramKey,\n        authorityKey,\n        playerKey,\n        publisherKey,\n        bankKey,\n        mintKey,\n        airdropKey,\n        playerSPLKey,\n    ) {\n        const dataLayout = BufferLayout.struct([\n            BufferLayout.u8(\"i\"),\n        ]);\n      \n        const data = Buffer.alloc(dataLayout.span);\n        dataLayout.encode(\n            {\n              i:2, // claim instruct \n            },\n            data,\n        );\n      \n        let keys = [\n            {pubkey: tokenProgramKey, isSigner: false, isWritable: true},\n            {pubkey: authorityKey, isSigner: false, isWritable: true},\n            {pubkey: playerKey, isSigner: true, isWritable: true},\n            {pubkey: publisherKey, isSigner: false, isWritable: true},\n            {pubkey: bankKey, isSigner: false, isWritable: true},\n            {pubkey: mintKey, isSigner: false, isWritable: true},\n            {pubkey: airdropKey, isSigner: false, isWritable: true},\n            {pubkey: playerSPLKey, isSigner: false, isWritable: true},\n        ];\n\n        const  trxi = new TransactionInstruction({\n            keys,\n            programId: programID,\n            data,\n        });\n        return trxi;\n    }\n\n    static async GetAirdrop(\n        connection,\n        airdropKey,\n    ) {\n        let resp = await connection._rpcRequest('getAccountInfo', [\n            airdropKey.toBase58(),\n            {\n              encoding:'jsonParsed',\n              commitment: 'recent',\n            }\n        ])\n        if (resp.result  ) {\n            const result = resp.result;\n            //console.log(\"result:\",result)\n            const airdrop_buf = result.value.data[0];\n            const airdrop= Buffer.from(airdrop_buf, 'base64');\n            \n            const count = intFromBytes(airdrop.slice(105,113));\n            for(let i=0; i< count; i++) {\n                const index = 113\n                const key =  new PublicKey(airdrop.slice(index+i*33,index+i*33+32)); \n                const status =  airdrop[index+i*33+32]\n                console.log(\"key :\", key.toBase58() , \" status:\", status)\n            }\n        } else {\n            return null;\n        }\n    }\n\n    static async airdrop(\n        connection,\n        programID,\n        publisherAccount,\n        mintKey,\n        amount,\n        names \n    ) {\n        let authKey = null;\n        let nonce = 0;\n        for (let i=1; i<128; i++) {\n            try {\n                authKey = await PublicKey.createProgramAddress([publisherAccount.publicKey.toBuffer(),Buffer.from([i])], programID)\n            } catch(e) {\n               continue \n            }\n            nonce = i;\n            console.log(\"nonce is \", nonce)\n            console.log(\"auth is \", authKey.toBase58())\n            break\n        }\n        if (authKey == null) {\n            return new Promise((resolve, reject)=>{\n                reject(\"can not find a nonce for publisher on createProgramAddress\")\n            })\n        }\n\n        // step1: create a spl account\n        const splAccount = new Account();\n        console.log(\"bank is :\", splAccount.publicKey.toBase58())\n        // step2: caculate ret\n        const balanceNeeded = await Token.getMinBalanceRentForExemptAccount(\n            connection,\n        );\n\n        // step3: create createAccount transaction instrument\n        const createAccountTrxi =  SystemProgram.createAccount({\n            fromPubkey: publisherAccount.publicKey,\n            newAccountPubkey: splAccount.publicKey,\n            lamports: balanceNeeded,\n            space: AccountLayout.span,\n            programId: new PublicKey(TOKEN_PROGRAM),\n        })\n        // step4: ceate init account transaction instrucment\n        const initAccountTrx =   Token.createInitAccountInstruction(\n            new PublicKey(TOKEN_PROGRAM), \n            mintKey,\n            splAccount.publicKey,\n            authKey,\n        )\n\n\n\n        let airdropSpace = Layout.airdropHeadSpace+33*names.length;\n        let airdropSpaceNeeded = await connection.getMinimumBalanceForRentExemption(airdropSpace);\n\n        // step1: create a spl account\n        const airdropAccount = new Account();\n        console.log(\"airdrop is :\", airdropAccount.publicKey.toBase58()) \n        const trxi0 =  SystemProgram.createAccount({\n            fromPubkey: publisherAccount.publicKey,\n            newAccountPubkey: airdropAccount.publicKey,\n            lamports: airdropSpaceNeeded,\n            space: airdropSpace,\n            programId: programID,\n        });\n        console.log(\"airdrop Key:\", airdropAccount.publicKey.toBase58())\n      \n        let trxi = Airdrop.createAirdropInstruction(\n            programID,\n            publisherAccount.publicKey,\n            splAccount.publicKey,\n            mintKey,\n            airdropAccount.publicKey,\n            authKey,\n            amount,\n            names.length,\n            nonce,\n            names \n        )\n      \n        // step5: create transaction\n        const transaction = new Transaction()\n        transaction.add(createAccountTrxi)\n        transaction.add(initAccountTrx)\n        transaction.add(trxi0);\n        transaction.add(trxi);\n      \n        let signers= [publisherAccount, splAccount, airdropAccount];\n        try {\n            await sendAndConfirmTransaction(connection, transaction, signers, {\n                skipPreflight: false,\n                commitment: 'recent',\n                preflightCommitment: 'recent',\n            })\n            return new Promise((resolve, reject)=>{\n                resolve({\n                    \"authKey\":authKey.toBase58(),\n                    \"bankKey\":splAccount.publicKey.toBase58(),\n                    \"airdrop\":airdropAccount.publicKey.toBase58(),\n                    \"nonce\":nonce,\n                });\n            }) \n        } catch(e) {\n            console.log(\"airdrop:\",e);\n            return new Promise((resolve, reject)=>{\n                reject(e);\n            }) \n        }\n    }\n}"],"names":["intFromBytes","byteArr","ret","forEach","val","i","publicKey","property","BufferLayout","airdropHeadSpace","TOKEN_PROGRAM","Airdrop","createAirdropInstruction","programID","publisherKey","bankKey","mintKey","airdropKey","authKey","amount","count","nonce","names","dataLayout","data","Buffer","alloc","span","encode","u64","toBuffer","console","log","copy","keys","pubkey","isSigner","isWritable","trxi","TransactionInstruction","programId","createClaimInstruction","tokenProgramKey","authorityKey","playerKey","playerSPLKey","GetAirdrop","connection","resp","_rpcRequest","toBase58","encoding","commitment","result","airdrop_buf","value","airdrop","from","slice","index","key","PublicKey","status","publisherAccount","createProgramAddress","e","Promise","resolve","reject","splAccount","Account","balanceNeeded","Token","getMinBalanceRentForExemptAccount","createAccountTrxi","SystemProgram","createAccount","fromPubkey","newAccountPubkey","lamports","space","AccountLayout","initAccountTrx","createInitAccountInstruction","airdropSpace","Layout","length","airdropSpaceNeeded","getMinimumBalanceForRentExemption","airdropAccount","trxi0","transaction","Transaction","add","signers","sendAndConfirmTransaction","skipPreflight","preflightCommitment"],"mappings":";;;;AACO,SAASA,YAAT,CAAsBC,OAAtB,EAA+B;AAClC,MAAIC,GAAG,GAAG,CAAV;AACAD,EAAAA,OAAO,CAACE,OAAR,CAAgB,CAACC,GAAD,EAAMC,CAAN,KAAY;AAAEH,IAAAA,GAAG,IAAIE,GAAG,GAAG,OAAOC,CAApB;AAAwB,GAAtD;AACA,SAAOH,GAAP;AACH;;ACLD;AAIA;AACA;AACA;;AACO,SAASI,SAAT,CAAmBC,QAAnB,EAA6B;AAChC,SAAOC,IAAA,CAAkB,EAAlB,EAAsBD,QAAtB,CAAP;AACH;MAEYE,gBAAgB,GAAG;;ACXhC;AACA;AACA;AAgBO,MAAMC,aAAa,GAAG,6CAAtB;AAEP;AACA;AACA;;AACO,MAAMC,OAAN,CAAc;AACjB;AACJ;AACA;AACA;AACI,SAAOC,wBAAP,CACIC,SADJ,EAEIC,YAFJ,EAGIC,OAHJ,EAIIC,OAJJ,EAKIC,UALJ,EAMIC,OANJ,EAOIC,MAPJ,EAQIC,KARJ,EASIC,KATJ,EAUIC,KAVJ,EAWE;AAEE,UAAMC,UAAU,GAAGf,MAAA,CAAoB,CACnCA,EAAA,CAAgB,GAAhB,CADmC,EAEnCA,IAAA,CAAkB,CAAlB,EAAoB,QAApB,CAFmC,EAGnCA,IAAA,CAAkB,CAAlB,EAAoB,OAApB,CAHmC,EAInCA,EAAA,CAAgB,OAAhB,CAJmC,CAApB,CAAnB;AAOA,UAAMgB,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAaH,UAAU,CAACI,IAAX,GAAgBP,KAAK,GAAC,EAAnC,CAAb;AACAG,IAAAA,UAAU,CAACK,MAAX,CACI;AACEvB,MAAAA,CAAC,EAAC,CADJ;AACO;AACLc,MAAAA,MAAM,EAAC,IAAIU,GAAJ,CAAQV,MAAR,EAAgBW,QAAhB,EAFT;AAGEV,MAAAA,KAAK,EAAC,IAAIS,GAAJ,CAAQT,KAAR,EAAeU,QAAf,EAHR;AAIET,MAAAA,KAAK,EAACA;AAJR,KADJ,EAOIG,IAPJ;AASAO,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBV,KAAtB;;AAEA,SAAK,IAAIjB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACe,KAAhB,EAAuBf,CAAC,EAAxB,EAA4B;AACxBiB,MAAAA,KAAK,CAACjB,CAAD,CAAL,CAAS4B,IAAT,CAAcT,IAAd,EAAmBD,UAAU,CAACI,IAAX,GAAgBtB,CAAC,GAAC,EAArC;AACH;;AACD0B,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBR,IAAxB;AAEA,QAAIU,IAAI,GAAG,CACP;AAACC,MAAAA,MAAM,EAAErB,YAAT;AAAuBsB,MAAAA,QAAQ,EAAE,IAAjC;AAAuCC,MAAAA,UAAU,EAAE;AAAnD,KADO,EAEP;AAACF,MAAAA,MAAM,EAAEpB,OAAT;AAAkBqB,MAAAA,QAAQ,EAAE,KAA5B;AAAmCC,MAAAA,UAAU,EAAE;AAA/C,KAFO,EAGP;AAACF,MAAAA,MAAM,EAAEnB,OAAT;AAAkBoB,MAAAA,QAAQ,EAAE,KAA5B;AAAmCC,MAAAA,UAAU,EAAE;AAA/C,KAHO,EAIP;AAACF,MAAAA,MAAM,EAAElB,UAAT;AAAqBmB,MAAAA,QAAQ,EAAE,KAA/B;AAAsCC,MAAAA,UAAU,EAAE;AAAlD,KAJO,EAKP;AAACF,MAAAA,MAAM,EAAEjB,OAAT;AAAkBkB,MAAAA,QAAQ,EAAE,KAA5B;AAAmCC,MAAAA,UAAU,EAAE;AAA/C,KALO,CAAX;AAQA,UAAOC,IAAI,GAAG,IAAIC,sBAAJ,CAA2B;AACrCL,MAAAA,IADqC;AAErCM,MAAAA,SAAS,EAAE3B,SAF0B;AAGrCW,MAAAA;AAHqC,KAA3B,CAAd;AAKA,WAAOc,IAAP;AACH;AAED;AACJ;AACA;AACA;;;AACI,SAAOG,sBAAP,CACI5B,SADJ,EAEI6B,eAFJ,EAGIC,YAHJ,EAIIC,SAJJ,EAKI9B,YALJ,EAMIC,OANJ,EAOIC,OAPJ,EAQIC,UARJ,EASI4B,YATJ,EAUE;AACE,UAAMtB,UAAU,GAAGf,MAAA,CAAoB,CACnCA,EAAA,CAAgB,GAAhB,CADmC,CAApB,CAAnB;AAIA,UAAMgB,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAaH,UAAU,CAACI,IAAxB,CAAb;AACAJ,IAAAA,UAAU,CAACK,MAAX,CACI;AACEvB,MAAAA,CAAC,EAAC,CADJ;;AAAA,KADJ,EAIImB,IAJJ;AAOA,QAAIU,IAAI,GAAG,CACP;AAACC,MAAAA,MAAM,EAAEO,eAAT;AAA0BN,MAAAA,QAAQ,EAAE,KAApC;AAA2CC,MAAAA,UAAU,EAAE;AAAvD,KADO,EAEP;AAACF,MAAAA,MAAM,EAAEQ,YAAT;AAAuBP,MAAAA,QAAQ,EAAE,KAAjC;AAAwCC,MAAAA,UAAU,EAAE;AAApD,KAFO,EAGP;AAACF,MAAAA,MAAM,EAAES,SAAT;AAAoBR,MAAAA,QAAQ,EAAE,IAA9B;AAAoCC,MAAAA,UAAU,EAAE;AAAhD,KAHO,EAIP;AAACF,MAAAA,MAAM,EAAErB,YAAT;AAAuBsB,MAAAA,QAAQ,EAAE,KAAjC;AAAwCC,MAAAA,UAAU,EAAE;AAApD,KAJO,EAKP;AAACF,MAAAA,MAAM,EAAEpB,OAAT;AAAkBqB,MAAAA,QAAQ,EAAE,KAA5B;AAAmCC,MAAAA,UAAU,EAAE;AAA/C,KALO,EAMP;AAACF,MAAAA,MAAM,EAAEnB,OAAT;AAAkBoB,MAAAA,QAAQ,EAAE,KAA5B;AAAmCC,MAAAA,UAAU,EAAE;AAA/C,KANO,EAOP;AAACF,MAAAA,MAAM,EAAElB,UAAT;AAAqBmB,MAAAA,QAAQ,EAAE,KAA/B;AAAsCC,MAAAA,UAAU,EAAE;AAAlD,KAPO,EAQP;AAACF,MAAAA,MAAM,EAAEU,YAAT;AAAuBT,MAAAA,QAAQ,EAAE,KAAjC;AAAwCC,MAAAA,UAAU,EAAE;AAApD,KARO,CAAX;AAWA,UAAOC,IAAI,GAAG,IAAIC,sBAAJ,CAA2B;AACrCL,MAAAA,IADqC;AAErCM,MAAAA,SAAS,EAAE3B,SAF0B;AAGrCW,MAAAA;AAHqC,KAA3B,CAAd;AAKA,WAAOc,IAAP;AACH;;AAED,eAAaQ,UAAb,CACIC,UADJ,EAEI9B,UAFJ,EAGE;AACE,QAAI+B,IAAI,GAAG,MAAMD,UAAU,CAACE,WAAX,CAAuB,gBAAvB,EAAyC,CACtDhC,UAAU,CAACiC,QAAX,EADsD,EAEtD;AACEC,MAAAA,QAAQ,EAAC,YADX;AAEEC,MAAAA,UAAU,EAAE;AAFd,KAFsD,CAAzC,CAAjB;;AAOA,QAAIJ,IAAI,CAACK,MAAT,EAAmB;AACf,YAAMA,MAAM,GAAGL,IAAI,CAACK,MAApB,CADe;;AAGf,YAAMC,WAAW,GAAGD,MAAM,CAACE,KAAP,CAAa/B,IAAb,CAAkB,CAAlB,CAApB;AACA,YAAMgC,OAAO,GAAE/B,MAAM,CAACgC,IAAP,CAAYH,WAAZ,EAAyB,QAAzB,CAAf;AAEA,YAAMlC,KAAK,GAAGpB,YAAY,CAACwD,OAAO,CAACE,KAAR,CAAc,GAAd,EAAkB,GAAlB,CAAD,CAA1B;;AACA,WAAI,IAAIrD,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAEe,KAAhB,EAAuBf,CAAC,EAAxB,EAA4B;AACxB,cAAMsD,KAAK,GAAG,GAAd;AACA,cAAMC,GAAG,GAAI,IAAIC,SAAJ,CAAcL,OAAO,CAACE,KAAR,CAAcC,KAAK,GAACtD,CAAC,GAAC,EAAtB,EAAyBsD,KAAK,GAACtD,CAAC,GAAC,EAAR,GAAW,EAApC,CAAd,CAAb;AACA,cAAMyD,MAAM,GAAIN,OAAO,CAACG,KAAK,GAACtD,CAAC,GAAC,EAAR,GAAW,EAAZ,CAAvB;AACA0B,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB4B,GAAG,CAACV,QAAJ,EAArB,EAAsC,UAAtC,EAAkDY,MAAlD;AACH;AACJ,KAbD,MAaO;AACH,aAAO,IAAP;AACH;AACJ;;AAED,eAAaN,OAAb,CACIT,UADJ,EAEIlC,SAFJ,EAGIkD,gBAHJ,EAII/C,OAJJ,EAKIG,MALJ,EAMIG,KANJ,EAOE;AACE,QAAIJ,OAAO,GAAG,IAAd;AACA,QAAIG,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIhB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,GAAhB,EAAqBA,CAAC,EAAtB,EAA0B;AACtB,UAAI;AACAa,QAAAA,OAAO,GAAG,MAAM2C,SAAS,CAACG,oBAAV,CAA+B,CAACD,gBAAgB,CAACzD,SAAjB,CAA2BwB,QAA3B,EAAD,EAAuCL,MAAM,CAACgC,IAAP,CAAY,CAACpD,CAAD,CAAZ,CAAvC,CAA/B,EAAyFQ,SAAzF,CAAhB;AACH,OAFD,CAEE,OAAMoD,CAAN,EAAS;AACR;AACF;;AACD5C,MAAAA,KAAK,GAAGhB,CAAR;AACA0B,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBX,KAAzB;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBd,OAAO,CAACgC,QAAR,EAAxB;AACA;AACH;;AACD,QAAIhC,OAAO,IAAI,IAAf,EAAqB;AACjB,aAAO,IAAIgD,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAClCA,QAAAA,MAAM,CAAC,4DAAD,CAAN;AACH,OAFM,CAAP;AAGH,KAlBH;;;AAqBE,UAAMC,UAAU,GAAG,IAAIC,OAAJ,EAAnB;AACAvC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBqC,UAAU,CAAC/D,SAAX,CAAqB4C,QAArB,EAAzB,EAtBF;;AAwBE,UAAMqB,aAAa,GAAG,MAAMC,KAAK,CAACC,iCAAN,CACxB1B,UADwB,CAA5B,CAxBF;;AA6BE,UAAM2B,iBAAiB,GAAIC,aAAa,CAACC,aAAd,CAA4B;AACnDC,MAAAA,UAAU,EAAEd,gBAAgB,CAACzD,SADsB;AAEnDwE,MAAAA,gBAAgB,EAAET,UAAU,CAAC/D,SAFsB;AAGnDyE,MAAAA,QAAQ,EAAER,aAHyC;AAInDS,MAAAA,KAAK,EAAEC,aAAa,CAACtD,IAJ8B;AAKnDa,MAAAA,SAAS,EAAE,IAAIqB,SAAJ,CAAcnD,aAAd;AALwC,KAA5B,CAA3B,CA7BF;;AAqCE,UAAMwE,cAAc,GAAKV,KAAK,CAACW,4BAAN,CACrB,IAAItB,SAAJ,CAAcnD,aAAd,CADqB,EAErBM,OAFqB,EAGrBqD,UAAU,CAAC/D,SAHU,EAIrBY,OAJqB,CAAzB;AASA,QAAIkE,YAAY,GAAGC,gBAAA,GAAwB,KAAG/D,KAAK,CAACgE,MAApD;AACA,QAAIC,kBAAkB,GAAG,MAAMxC,UAAU,CAACyC,iCAAX,CAA6CJ,YAA7C,CAA/B,CA/CF;;AAkDE,UAAMK,cAAc,GAAG,IAAInB,OAAJ,EAAvB;AACAvC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4ByD,cAAc,CAACnF,SAAf,CAAyB4C,QAAzB,EAA5B;AACA,UAAMwC,KAAK,GAAIf,aAAa,CAACC,aAAd,CAA4B;AACvCC,MAAAA,UAAU,EAAEd,gBAAgB,CAACzD,SADU;AAEvCwE,MAAAA,gBAAgB,EAAEW,cAAc,CAACnF,SAFM;AAGvCyE,MAAAA,QAAQ,EAAEQ,kBAH6B;AAIvCP,MAAAA,KAAK,EAAEI,YAJgC;AAKvC5C,MAAAA,SAAS,EAAE3B;AAL4B,KAA5B,CAAf;AAOAkB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4ByD,cAAc,CAACnF,SAAf,CAAyB4C,QAAzB,EAA5B;AAEA,QAAIZ,IAAI,GAAG3B,OAAO,CAACC,wBAAR,CACPC,SADO,EAEPkD,gBAAgB,CAACzD,SAFV,EAGP+D,UAAU,CAAC/D,SAHJ,EAIPU,OAJO,EAKPyE,cAAc,CAACnF,SALR,EAMPY,OANO,EAOPC,MAPO,EAQPG,KAAK,CAACgE,MARC,EASPjE,KATO,EAUPC,KAVO,CAAX,CA7DF;;AA2EE,UAAMqE,WAAW,GAAG,IAAIC,WAAJ,EAApB;AACAD,IAAAA,WAAW,CAACE,GAAZ,CAAgBnB,iBAAhB;AACAiB,IAAAA,WAAW,CAACE,GAAZ,CAAgBX,cAAhB;AACAS,IAAAA,WAAW,CAACE,GAAZ,CAAgBH,KAAhB;AACAC,IAAAA,WAAW,CAACE,GAAZ,CAAgBvD,IAAhB;AAEA,QAAIwD,OAAO,GAAE,CAAC/B,gBAAD,EAAmBM,UAAnB,EAA+BoB,cAA/B,CAAb;;AACA,QAAI;AACA,YAAMM,yBAAyB,CAAChD,UAAD,EAAa4C,WAAb,EAA0BG,OAA1B,EAAmC;AAC9DE,QAAAA,aAAa,EAAE,KAD+C;AAE9D5C,QAAAA,UAAU,EAAE,QAFkD;AAG9D6C,QAAAA,mBAAmB,EAAE;AAHyC,OAAnC,CAA/B;AAKA,aAAO,IAAI/B,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAClCD,QAAAA,OAAO,CAAC;AACJ,qBAAUjD,OAAO,CAACgC,QAAR,EADN;AAEJ,qBAAUmB,UAAU,CAAC/D,SAAX,CAAqB4C,QAArB,EAFN;AAGJ,qBAAUuC,cAAc,CAACnF,SAAf,CAAyB4C,QAAzB,EAHN;AAIJ,mBAAQ7B;AAJJ,SAAD,CAAP;AAMH,OAPM,CAAP;AAQH,KAdD,CAcE,OAAM4C,CAAN,EAAS;AACPlC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBiC,CAAvB;AACA,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAClCA,QAAAA,MAAM,CAACH,CAAD,CAAN;AACH,OAFM,CAAP;AAGH;AACJ;;AAlPgB;;;;"}